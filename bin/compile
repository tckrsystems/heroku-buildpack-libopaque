#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure Environment

set -eo pipefail

### Constants

### Paths

BASE_DIR=$PWD # absolute path
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
LIB_NAME=libopaque
VENDOR_DIR="$BUILD_DIR/vendor/$LIB_NAME"
LIB_DIR="$BUILD_DIR/lib/$LIB_NAME"

mkdir -p $CACHE_DIR
mkdir -p $VENDOR_DIR
mkdir -p $LIB_DIR

export_env_dir() {
  local env_dir=$1
  if [ -d "$env_dir" ]; then
    local whitelist_regex=${2:-''}
    local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
    if [ -d "$env_dir" ]; then
      for e in $(ls $env_dir); do
        echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
        export "$e=$(cat $env_dir/$e)"
        :
      done
    fi
  fi
}
export_env_dir "$ENV_DIR"

if ! command -v ruby &> /dev/null; then
  echo "-----> An existing Ruby installation was not found"
  ruby_version="3.2.1"
  ruby_url="https://heroku-buildpack-ruby.s3.us-east-1.amazonaws.com/${STACK}/ruby-${ruby_version}.tgz"
  vendored_ruby_dir=".heroku-buildpack-libopaque/ruby"
  mkdir -p "${BUILD_DIR}/${vendored_ruby_dir}"

  if ! curl --silent --show-error --fail --retry 3 --retry-connrefused --connect-timeout 5 "${ruby_url}" | tar -zxC "${BUILD_DIR}/${vendored_ruby_dir}"; then
    echo "     ! Failed to download Ruby from '${ruby_url}'" >&2
    exit 1
  fi

  mkdir -p "${BUILD_DIR}/.profile.d"
  # Deliberately pick the same profile.d script filepath as the Ruby buildpack,
  # so if the Ruby buildpack comes after this one, it will overwrite this script.
  echo "export PATH=\"\${HOME}/${vendored_ruby_dir}/bin:\${PATH}\"" > "${BUILD_DIR}/.profile.d/ruby.sh"

  echo "Installed Ruby ${ruby_version}"
fi

## Compile

cd $CACHE_DIR
echo -n "-----> Fetching $LIB_NAME... "
git clone https://github.com/stef/libopaque.git
echo "done"

echo -n "-----> Update submodule $LIB_NAME... "
cd $LIB_NAME
git submodule update --init --recursive --remote
echo "done"

echo -n "-----> Copy Ruby directory to lib... "
ls
#cp -r ruby $LIB_DIR

echo -n "-----> Compile $LIB_NAME... "
cd src
make
echo "done"

echo -n "-----> Installing $LIB_NAME... "
mkdir -p $VENDOR_DIR/bin
mkdir -p $VENDOR_DIR/lib
mkdir -p $VENDOR_DIR/include

cp opaque.o $VENDOR_DIR/bin
cp libopaque.a $VENDOR_DIR/lib
cp libopaque.so $VENDOR_DIR/lib
cp opaque.h $VENDOR_DIR/include
echo "done"

echo -n "-----> Configuring build environment... "
export LD_LIBRARY_PATH="$VENDOR_DIR/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$VENDOR_DIR/lib:$LIBRARY_PATH"
export CPPPATH="$VENDOR_DIR/include:$CPPPATH"
export CPATH="$VENDOR_DIR/include:$CPATH"
echo "done"

echo -n "-----> Compile ruby binding... "
( cd ${BUILD_DIR}/${vendored_ruby_dir}/bin ; ./ruby $LIB_DIR/extconf.rb )
( cd $LIB_DIR ; make )

cd $BASE_DIR

cat <<EOF > export
export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$LIBRARY_PATH:$LIBRARY_PATH"
export CPPPATH="\$CPPPATH:$CPPPATH"
export CPATH="\$CPATH:$CPATH"
EOF

echo "done"

echo -n "-----> Building runtime environment... "
mkdir -p $BUILD_DIR/.profile.d

cat <<EOF > $BUILD_DIR/.profile.d/libopaque.sh
export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:${LD_LIBRARY_PATH//$BUILD_DIR//app}"
export LIBRARY_PATH="\$LIBRARY_PATH:${LIBRARY_PATH//$BUILD_DIR//app}"
export CPPPATH="\$CPPPATH:${CPPPATH//$BUILD_DIR//app}"
export CPATH="\$CPATH:${CPATH//$BUILD_DIR//app}"
EOF

echo "done"

echo -n "-----> Cleaning up $LIB_NAME... "
cd $CACHE_DIR
rm -r $LIB_NAME
echo "done"

echo "-----> libopaque installed"

